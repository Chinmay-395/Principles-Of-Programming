#use "ex.ml";;
mem 1 [1;2;3];;
mem 7 [1;2;3];;
#use "ex.ml";;
has_duplicates [1;2;3;1];;
has_duplicates [1;2;3;7];;
#pwd;;
[1;2;3] @ [4;5];;
let f l = \nmatch l with\n| [] -> true;;
#use "ex.ml";;
sublist [1;2;3] [4;5;6];;
sublist [1;2;3] [4;5;6;1];;
sublist [1;2;3] [4;5;2;6;1];;
sublist [1;2;3] [4;3;5;2;6;1];;
#use "ex.ml";;
rev [1;2;3];;
#use "ex.ml";;
rev' [1;2;3] [];;
#use "ex.ml";;
last [];;
last [1;2;3];;
#use "ex.ml";;
concat [1;2;3] [4;5];;
#use "ex.ml";;
succl [1;2;3];;
#use "ex.ml";;
upperl ['a';'1';'b'];;
#use "ex.ml";;
is_zerol [1;0;0;1];;
#use "ex.ml";;
is_zerol [1;0;0;1];;
is_zerol' [1;0;0;1];;
List.map;;
#use "ex.ml";;
gtz [1;2;0;-4;3];;
#use "ex.ml";;
uppercase ['a';'B'; '5'];;
#use "ex.ml";;
non_empty [[1];[];[3;4]];;
#use "ex.ml";;
non_empty [[1];[];[3;4]];;
non_empty' [[1];[];[3;4]];;
#use "ex.ml";;
suml [1;2;3];;
#use "ex.ml";;
andl [true;false];;
andl [true;true];;
flatten [[1;2];[3;4;5]];;
List.flatten [[1;2];[3;4;5]];;
flatten [[1;2];[3;4;5]];;
#use "ex.ml";;
flatten [[1;2];[3;4;5]];;
#use "ex.ml";;
flatten [[1;2];[3;4;5]];;
flatten' [[1;2];[3;4;5]];;
1+2;;
+ 1 2;;
(+);;
(+) 1 2;;
1 (+ 2;;
1 (+) 2;;
List.fold_left;;
List.fold_right;;
#use "ex.ml";;
let m l = foldl (fun h r -> h::h::t) [] l;;
let m l = foldl (fun h r -> h::h::r) [] l;;
let m l = foldr (fun h r -> h::h::r) [] l;;
m [1;2;3];;
let m l = foldr (fun h r -> r@[h]) [] l;;
m [1;2;3];;
let m l = foldr (fun h r -> h+r) 0 l;;
m [1;2;3];;
let m l = foldr (fun h r -> h*r) 1 l;;
m [1;2;3];;
let m f l = foldr (fun h r -> f h::r) [] l;;
m (fun i -> i*i) [1;2;3];;
let m l = foldr (fun h r -> h @ r) [] l;;
m [[1;2];[3;4;5]];;
let m l1 l2 = foldr (fun h t i -> h::(t i)) (fun j->j) l1 l2;;
m [1;2] [3;4;5];;
#use "ex.ml";;
1;;
true;;
"hello";;
Mon;;
#use "ex.ml";;
is_weekend Mon;;
is_weekend Sat;;
is_weekend 2;;
[Mon;Sat];;
#use "ex.ml";;
price ic1;;
price ic2;;
price ic3;;
Cone;;
Cone Van;;
#use "ex.ml";;
is_boring ic1;;
is_boring ic2;;
is_boring ic3;;
is_boring [Van;Van;Van];;
is_boring @@ Bucket [Van;Van;Van];;
fun fl -> Cone fl;;
[1;2;3];;
[true;false];;
[1;true];;
#use "ex.ml";;
[1;true];;
[Left 1; Right true];;
1;;
Left 1;;
#use "ex.ml";;
find "nyc" [("anchorage",-10); ("nyc",-1)];;
find "chicago" [("anchorage",-10); ("nyc",-1)];;
raise Not_found;;
#use "ex.ml";;
find "chicago" [("anchorage",-10); ("nyc",-1)];;
find "nyc" [("anchorage",-10); ("nyc",-1)];;
Some 3;;
Error "h";;
Ok 4;;
None;;
1;;
[None;None];;
#use "ex.ml";;
sizet t1;;
#use "ex.ml";;
sumt t1;;
#use "ex.ml";;
mapt (fun i -> i*i) t1;;
mapt (fun i -> i>33) t1;;
#use "ex.ml";;
pre t1;;
#use "ex.ml";;
foldt (fun i l r -> i::(l @ r)) [] t1;;
foldt (fun i l r -> Node(i,r,l)) Empty t1;;
foldt (fun i l r -> i + l + r) 0 t1;;
#quit;;
